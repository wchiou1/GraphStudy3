	/*
			var force = d3.layout.force()
							.size([config.w, config.h])
							.nodes(nodes)
							.links(links);

			force.linkDistance(config.w/3.5);
			var link = self.svg.selectAll('.link')
							.data(links)
							.enter().append('line')
							.attr('class', 'link')
							.attr('x1', function(d) {return nodes[d.source].x; } )
							.attr('y1', function(d) {return nodes[d.source].y; } )
							.attr('x2', function(d) {return nodes[d.target].x; } )
							.attr('y2', function(d) {return nodes[d.target].y; } )
							;

			var node = self.svg.selectAll('.node')
							.data(nodes)
							.enter().append('circle')
							.attr('class', 'node')
							.attr('r', config.w/100)
							.attr('cx', function(d) {return d.x;})
							.attr('cy', function(d) {return d.y;});

			var animating = false;
			var animationStep = 400;
			force.on('tick', function(){
				node.transition().ease('linear').duration(animationStep)
					.attr('cx', function(d) {return d.x;} )
					.attr('cy', function(d) {return d.y;} );

				link.transition().ease('linear').duration(animationStep)
					.attr('x1', function(d) {return d.source.x;})
					.attr('y1', function(d) {return d.source.y;})
					.attr('x2', function(d) {return d.target.x;})
					.attr('y2', function(d) {return d.target.y;});

				force.stop();

				if(animating)
				{
				 setTimeout( function() {force.start();}, animationStep );
				}

			}); */

			//self.layout.force.start();

			/*
			force.on('end', function(){
					node.attr('r', config.w/100)
						.attr('cx', function(d) {return d.x;})
						.attr('cy', function(d) {return d.y;});

					link.attr('x1', function(d) {return d.source.x;})
						.attr('y1', function(d) {return d.source.y;})
						.attr('x2', function(d) {return d.target.x;})
						.attr('y2', function(d) {return d.target.y;});
				});
			*/
			//animating = true;
			//force.start();


			//root.append('<div id="drag" style="width: 50px; height: 50px; background-color: red;"/>');
			//root.append('TEST');
			//root.append('<hr/>');

			/*
			root.find('#drag').draggable({
				revert: true,
				revertDuration: 0,
				scroll: false,
				stop: function(event, ui) {
					var force;

					if (self.contains(mouse.x, mouse.y)) {return;}

					var mouse = $P.state.mainCanvas.getMouseLocation(event);
					mouse.x += $P.state.scrollX;

					var send = {
						name: 'dragPathway',
						x: mouse.x, y: mouse.y,
						strokeStyle: 'gray',
						expression: null};
					var result = $P.state.scene.sendEvent(send);

					if (!result) {
						force = new $P.Bubble.Force({x: mouse.x, y: mouse.y, w: 750, h: 600});
						$P.state.scene.add(force);
						result = force.receiveEvent(event);}

					if (result && result.addLink) {
						// Add Link Here.
					}

			}});

			root.find('#search_run').click(function(event) {
				self.updateSearch();});
			*/